#!/bin/bash

#
# launch-server -- Launch server as daemon.
#

set -e

server_dir=$(pwd)/$(dirname "$0")
server_main="${server_dir}/src/server.js"
server_log="${server_dir}/server.log"
server_conf="/etc/advse/server.conf"

function is_windows {
    case $(uname -s) in
        CYGWIN*|MINGW*) return 0 ;;
        *)              return 1 ;;
    esac
}

function is_root {
    [[ $EUID -eq 0 ]] && return 0
    return 1
}

if is_windows; then
    server_dir=$(cygpath -w "${server_dir}")
    server_main=$(cygpath -w "${server_main}")
    server_log=$(cygpath -w "${server_log}")
fi

function die {
    echo "*** Fatal error: $@" >&2
    exit 1
}

function setup_env {
    if [[ -f "${server_conf}" ]]; then
        while read LINE; do
            # Print line unless it is blank or starts with #
            local string=$(echo "${LINE}" | sed 's/^[[:space:]]*//')
            if [[ ${#string} -gt 0 ]] && [[ ! "${string}" =~ \#.* ]]; then
                echo "${string}" >&2
                export "${string}"
            fi
        done <"${server_conf}"
    fi
}

function start_daemon {
    [[ -x $(which setsid) ]] || die "setsid command required"
    echo "*** Starting server daemon" >&2
    # Set umask to 0 and cd to /.
    umask 0
    cd /
    # Run server detatched from shell, appending its output to $server_log.
    setsid "$(which node)" "${server_main}" </dev/null 2>&1 >>"${server_log}" &
    # Echo the PID on stdout so user/script can send signals to the server.
    echo $!
}

# Don't run server if not root user, unless running on Windows.
is_windows || is_root || die "Server should be run as root"

# Make sure Node.js is installed.
[[ -x $(which node) ]] || die "Node.js (node) is not in PATH"

setup_env
start_daemon
