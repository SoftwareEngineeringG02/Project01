#!/bin/bash

#
# tests/blackbox -- Blackbox testbed for server.
#

set -e

program_name=$(basename "$0")
program_dir=$(dirname "$0")
script_name="verify_json.js"
script_path="${program_dir}/${script_name}"

function say {
    echo "${program_name}: $@"
}

function die {
    say $@ >&2
    exit 1
}

# Check for cURL
[[ -x $(which curl) ]] || die "Require cURL but it could not be found"

# Check for node
[[ -x $(which node) ]] || die "Require node but it could not be found"

# Check for verify_json.js
[[ -f "${script_path}" ]] || die "Could not find ${script_path}"

# Check for address
address=${ADDRESS}
if [[ "x${address}" = "x" ]]; then
    address="127.0.0.1"
fi

# Check for port
port=${PORT}
if [[ "x${port}" = "x" ]]; then
    port="80"
fi

say "Using address ${address}"
say "Using port ${port}"

tests_passed=0
tests_failed=0

# Test a GET request.
# Args:
# * URL (e.g. /)
# * property (e.g. error)
# * expected value (e.g. 0)
# Return value: 0 if the property existed and had the expected value, otherwise 1.
function test_get {
    local url="$1"
    local property="$2"
    local type="$3"
    local value="$4"
    say "Testing GET ${url}"
    local json=$(curl -s "${address}:${port}${url}")
    if node ${script_path} "${json}" "${property}" "${type}" "${value}"; then
        say "Passed"
        tests_passed=$[tests_passed + 1]
    else
        say "Failed"
        tests_failed=$[tests_failed + 1]
    fi
}

# Test a POST request with data.
# Args:
# * URL (e.g. /)
# * request body
# * property name (e.g. error)
# * expected type (e.g. number, string, object)
# * expected value (e.g. 0)
# Return value: 0 if the property existed and had the expected value, otherwise 1.
function test_post {
    local url="$1"
    local body="$2"
    local property="$3"
    local type="$4"
    local value="$5"
    say "Testing POST ${url} with body=${body}"
    local json=$(curl -s -X POST "${address}:${port}${url}" --data "${body}")
    if node ${script_path} "${json}" "${property}" "${type}" "${value}"; then
        say "Passed"
        tests_passed=$[tests_passed + 1]
    else
        say "Failed"
        tests_failed=$[tests_failed + 1]
    fi
}

id=$(uuidgen)
longitude="${RANDOM}.${RANDOM}"
latitude="${RANDOM}.${RANDOM}"

# GET / should succeed.
test_get "/" "error" "number" "0"

# GET /location should fail.
test_get "/location" "error" "number" "1"

# GET /invalid should fail.
test_get "/invalid" "error" "number" "1"

# POST with invalid JSON should fail.
test_post "/price" "{\"id\": \"${id}\", \"\"}" "error" "number" "1"

# POST /location/update should succeed.
test_post "/location/update" "{\"id\": \"${id}\", \"longitude\": ${longitude}, \"latitude\": ${latitude} }" "error" "number" "0"

# POST /location should return the same values for longitude and latitude.
test_post "/location" "{\"id\": \"${id}\"}" "longitude" "number" "${longitude}"

# POST /location should return the same values for longitude and latitude.
test_post "/location" "{\"id\": \"${id}\"}" "latitude" "number" "${latitude}"

# POST /price should return the price.
test_post "/price" "{\"id\": \"${id}\", \"longitude\": 53.4323033464106, \"latitude\": -3.04224037193833}" "price" "number" "180000"

# POST /price/map should succeed.
test_post "/price/map" "{\"id\": \"${id}\", \"longitude\": 53.4323033464106, \"latitude\": -3.04224037193833, \"radius\": 1000}" "error" "number" "0"

# POST /postcode should return postcode from postcodes.io.
test_post "/postcode" "{\"id\": \"${id}\", \"longitude\": 50.8644696983097,\"latitude\": -0.0870764878371261}" "postcode" "string" "BN1 9RH"

# POST /postcode/reverse should return expected longitude.
test_post "/postcode/reverse" "{\"id\": \"${id}\",\"postcode\": \"BN1 9RH\"}" "longitude" "number" "50.8644696983097"

# POST /postcode/reverse should return expected latitude.
test_post "/postcode/reverse" "{\"id\": \"${id}\", \"postcode\": \"BN1 9RH\"}" "latitude" "number" "-0.0870764878371261"

# POST /postcode/map should succeed.
test_post "/postcode/map" "{\"id\": \"${id}\", \"postcode\": \"CH45 5BH\", \"radius\": 1000}" "error" "number" "0"

# Show statistics
say "Passed ${tests_passed} and failed ${tests_failed} tests"

# Fail if any test failed.
exit ${tests_failed}
